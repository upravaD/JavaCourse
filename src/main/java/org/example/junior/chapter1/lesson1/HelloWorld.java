package org.example.junior.chapter1.lesson1;

/**
 * <h1><i> Java for beginners. <i/>
 * <h2> Chapter 1: "Основы Java".
 * <h3> Lesson 1: "JDK and Hello World!".
 *
 * <h3> Первая программа.
 * <p>Java – строго типизированный объектно-ориентированный язык программирования. Его создали в 1995 году, и с того времени он получил много улучшений. Стабильно занимает лидирующие места в <a href="https://spectrum.ieee.org/top-programming-language-2020" target="_blank">рейтингах</a> <a href="https://www.tiobe.com/tiobe-index/" target="_blank">языков программирования</a> и в рейтингах <a href="https://habr.com/ru/article/540718/" target="_blank">зарплат</a> <a href="https://dou.ua/lenta/articles/salary-report-devs-summer-2021/" target="_blank">разработчиков</a>.</p>
 * <p>И самое главное – рейтинг Java не прыгает из года в год, а остается стабильно высоким. Давайте разбираться, что обеспечивает Java популярность.</p>
 * <p>1. <span class="text-bold">Кроссплатформенность</span> – написанный код транслируется в байт-код, который выполняет JVM. Существуют реализации JVM под самые разные платформы, и это означает, что написанный один раз код будет работать и на Windows, и на Linux, и на macOS, и даже на разной экзотике, такой как Arduino, умном холодильнике, пылесосе… То есть, код будет работать на разных платформах и операционных системах, и при этом его не нужно адаптировать под каждую из них.</p>
 * <p>2. <span class="text-bold">Автоматическое управление памятью</span> – разработчику не нужно думать о том, в каких адресах оперативной памяти хранятся переменные, вручную обеспечивать их чтение/запись и заботиться о целостности данных. Когда решаешь бизнес-задачу заказчика, нужно думать о задаче, а не о том, как и куда записать какие-то байты.</p>
 * <p>3. <span class="text-bold">Скорость работы</span> (just-in-time компилятор) – в дополнение к статической компиляции, которая происходит «заранее», работает динамическая компиляция. Это актуально для серверного кода, который может работать месяцами и даже годами. Код, который выполняется часто, компилируется разными вариантами и замеряется его время исполнения. Таким образом, чем дольше работает приложение, тем быстрее она работает. И это при активно работающем сервере. Круто, правда?</p>
 * <p>4. <span class="text-bold">Обратная совместимость</span> – код, написанный на более старых версиях Java, будет работать и на более новых версиях. Это удобно: после обновления не нужно переписывать половину проекта «ради обновления», и при этом можно получить последние патчи безопасности.</p>
 * <p>5. <span class="text-bold">Объектно-ориентированность</span> – человек мыслит объектами: стол, троллейбус, смартфон. Разработчику не нужно мыслить непривычными парадигмами во время работы, и это бережет наш код от лишних ошибок. Нужно концентрироваться только на тех деталях, которые важны в рамках задачи. Например, с точки зрения дизайнера интерьера важен размер стола и его положение в пространстве. Не важны дата его производства, фамилия рабочего, который выпилил этот стол, телефон курьера, который его доставлял. Кроме этого, в коде данные и методы работы с ними хранятся вместе.</p>
 * <p>6. <span class="text-bold">Статическая типизация</span> (fail-fast) – проверка соответствия типов переменных на этапе компиляции. Компиляцию запускают все разработчики, поэтому ошибки компиляции отлавливаются почти моментально. Чем более поздним будет этап, на котором обнаружат ошибку – тем дороже ее исправление.</p>
 * <p>7. <span class="text-bold">Сode as documentation</span> – Java читается как предложения на английском языке. За счет этого в большинстве случаев не нужно тратить усилия на ведение документации, так как любой разработчик, посмотрев в код, понимает, что делает этот метод, или за какое поведение отвечает интерфейс. Кроме этого, сильно развита практика «правильного» именования всех сущностей в коде. Часто по названию метода понятно, что он делает. </p>
 * <p>Например, метод getContext() возвращает контекст, а поле age отвечает за хранение возраста. В Java длина названия не влияет на количество ресурсов системы, которые нужны для работы с сущностями. Этим грешит С – когда разработчик приходит на новый проект, вместо того, чтоб разбираться в логике кода, он занимается его расшифровкой.</p>
 * <p>8. <span class="text-bold">Множество open source библиотек и фреймворков</span> – 99% задач, с которыми в ежедневной практике сталкивается разработчик, уже кто-то когда-то решал. Если такие решения удачные, со временем они вырастают в библиотеки и даже фреймворки. Что лучше – погуглить 5 минут или изобретать свой велосипед на квадратных колесах?</p>
 * <p>9. <span class="text-bold">Большое комьюнити</span> – у популярного языка много разработчиков, они в интернете задают много вопросов, дают много ответов, пишут много кода, сталкиваются со многими проблемами и решают их. И чем больше разработчиков, тем более популярен язык, и тем быстрее он развивается. Замкнутый круг, однако.</p>
 * <p>Уже названо много положительных «качеств» Java, но хочется добавить еще несколько аспектов: </p>
 * <ul>
 *     <li><p>JVM (Java Virtual Machine) сама управляет памятью процесса: за счет этого она безопасна, и является языком #1 для финансовых инструментов.</p></li>
 *     <li><p>На Java очень удобно писать back-end сервера (серверную логику).</p></li>
 *     <li><p>До недавнего времени Java был основным языком для приложений на Android. </p>
 *         <p>Сейчас вместо него Kotlin, который является JVM языком, и от Java отличается наличием пары фич и «синтаксическим сахаром». Перейти с Java на Kotlin и наоборот займет несколько дней. А учитывая, что цикл обновления Java сейчас составляет полгода, не исключено, что в следующем релизе в ней будет все хайповое, ради чего писался Kotlin.</p></li>
 *     <li><p>Много известных компаний используют Java: Google, Facebook, Twitter, Amazon, LinkedIn, eBay, JavaRush и много-много других.</p></li>
 * </ul>
 * <br>
 *
 * @author upravaD
 * @version JDK 18
 * @see <a href="https://docs.oracle.com/javase/tutorial/getStarted/cupojava/index.html"/>Документация Oracle</a>
 **/

public class HelloWorld { //Основной класс программы.

    /**
     * Ключевое слово {@code public} означает, что метод {@code main()} доступен везде, где доступен содержащий его класс. Ключевое слово {@code static} означает, что метод является статическим, т.е. не требует для своего вызова наличие экземпляра класса. Ключевое слово {@code void} означает, что метод не возвращает никакого значения.
     */
    public static void main(String[] args) { //Стартовый метод программы.

        //Вывод строки в консоль.
        System.out.println("Hello World!");
    }
}